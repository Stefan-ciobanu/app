{"version":3,"sources":["Components/Chart/MyChart.tsx","Components/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyChart","_ref","priceData","_useState","useState","_useState2","Object","slicedToArray","price","setPrice","_useState3","_useState4","toggleAverage","setToggleAverage","useEffect","_displayData","asyncToGenerator","_regeneratorRuntime","mark","_callee","stockPrice","wrap","_context","prev","next","results","map","stock","date","Date","t","values","open","o","average","reduce","prevValue","currValue","length","name","concat","ticker","closed","c","high","h","datefrom","toLocaleDateString","toFixed","stop","apply","this","arguments","displayData","react_default","a","createElement","Fragment","AreaChart","width","height","data","margin","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","type","dataKey","stroke","fillOpacity","strokeWidth","fill","CartesianGrid","strokeDasharray","XAxis","padding","minTickGap","tick","YAxis","domain","Tooltip","Legend","className","htmlFor","onChange","e","target","checked","MainPage","from","setDate","getDate","defaultDate","toISOString","substring","curr","defaultCurrDate","setData","dateFrom","setDateFrom","_useState5","_useState6","dateTo","setDateTo","_useState7","_useState8","stocks","setStocks","MainPage_regeneratorRuntime","response","axios","get","sent","abrupt","getData","_unused","console","error","log","defaultValue","max","value","Chart_MyChart","App","MainPage_MainPage","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.69b1fd7f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../Chart/myChart.css\";\r\n\r\nimport {\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Area,\r\n  AreaChart,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\ninterface Props {\r\n  t: string;\r\n  h: number;\r\n  c: number;\r\n  o: number;\r\n  name: string;\r\n  open: number;\r\n  closed: number;\r\n  high: number;\r\n  datefrom: number;\r\n  otherProp?: any;\r\n}\r\n\r\nfunction MyChart({\r\n  priceData,\r\n}: {\r\n  priceData: any;\r\n}): JSX.Element {\r\n\r\n  const [price, setPrice] = useState<any | null>(\"\");\r\n  const [toggleAverage, setToggleAverage] = useState<any | null>(false);\r\n\r\n  useEffect(() => {\r\n    async function displayData(): Promise<void> {\r\n      const stockPrice = priceData.results.map((stock: Props) => {\r\n        \r\n        const date = new Date(stock.t );\r\n        const values = priceData.results.map((open: Props ) => {        \r\n          return open.o; \r\n        })\r\n        const valueSum  = values.reduce((prevValue: number, currValue: number) => prevValue + currValue, 0);\r\n        const average =valueSum / values.length;\r\n        \r\n        const data = {\r\n          name: `${priceData.ticker}`,\r\n          open: stock.o,\r\n          closed: stock.c,\r\n          high: stock.h,\r\n          datefrom: date.toLocaleDateString(\"en-US\") ,\r\n          average: average.toFixed(2),\r\n        };\r\n        return data;\r\n      });\r\n      \r\n      setPrice(stockPrice);\r\n    }\r\n    displayData();\r\n\r\n  }, [priceData.results, priceData.ticker]);\r\n  \r\n  return (\r\n    <>\r\n      <AreaChart\r\n        width={1100}\r\n        height={500}\r\n        data={price}\r\n        margin={{ top: 100, right: 0, bottom: 20, left: 0 }}\r\n      >\r\n        <defs>\r\n          <linearGradient id=\"chartColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"15%\" stopColor=\"rgb(96, 145, 93)\" stopOpacity={1} />\r\n            <stop offset=\"95%\" stopColor=\"rgb(96, 145, 93)\" stopOpacity={0.2} />\r\n          </linearGradient>\r\n          <linearGradient id=\"chartColor2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"9%\" stopColor=\"rgb(152, 8, 168)\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"rgb(152, 8, 168)\" stopOpacity={0.3} />\r\n          </linearGradient>\r\n          <linearGradient id=\"chartColor3\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"rgb(152, 8, 168)\" stopOpacity={0.9} />\r\n            <stop\r\n              offset=\"98%\"\r\n              stopColor=\"rgb(152, 8, 168)\"\r\n              stopOpacity={0.1}\r\n            />\r\n          </linearGradient>\r\n        </defs>\r\n        <Area\r\n          type=\"monotoneX\"\r\n          dataKey=\"high\"\r\n          stroke=\"#1df07f\"\r\n          fillOpacity={0.3}\r\n          strokeWidth={2}\r\n          fill=\"\"\r\n        />\r\n        <Area\r\n          type=\"monotoneX\"\r\n          dataKey=\"closed\"\r\n          stroke=\"#3039bf\"\r\n          fillOpacity={1}\r\n          strokeWidth={2}\r\n          fill=\"\"\r\n        />\r\n        <Area\r\n          type=\"monotoneX\"\r\n          dataKey=\"open\"\r\n          stroke=\"#cd05e3\"\r\n          fillOpacity={1}\r\n          strokeWidth={3}\r\n          fill=\"url(#chartColor2)\"\r\n        />\r\n        {toggleAverage ? <Area \r\n          type=\"monotoneX\"\r\n          dataKey=\"average\"\r\n          fillOpacity={0}\r\n          strokeWidth={2}\r\n          fill=\"\"\r\n          stroke=\"#f5795d\" /> : null }\r\n        <CartesianGrid stroke=\"#334429\" strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"datefrom\"  padding={{ left: 10}} minTickGap={20} tick={{stroke: 'white', strokeWidth: 0.1}}/>\r\n        <YAxis domain={[\"datafrom\"]}  padding={{ bottom: 10 }} tick={{stroke: 'white', strokeWidth: 0.1}} />\r\n        <Tooltip />\r\n        <Legend></Legend>\r\n      </AreaChart>\r\n      <div className= \"check-box-container\">\r\n      <label htmlFor=\"averageCheckbox\">Average Price</label>\r\n      <input  className=\"checkbox\"type=\"checkbox\" name=\"averageCheckbox\" onChange={(e)=> setToggleAverage(e.target.checked)}></input>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MyChart from \"../Chart/MyChart\";\r\nimport \"../MainPage/mainPage.css\";\r\n\r\nexport const MainPage = (): JSX.Element => {\r\n  const dataType = [\"USD\", \"AAPL\", \"KIMpL\", \"TANH\", \"VSAT\"];\r\n\r\n  const from = new Date();\r\n  from.setDate(from.getDate() - 33);\r\n  const defaultDate = from.toISOString().substring(0,10);\r\n  \r\n  const curr = new Date();\r\n  curr.setDate(curr.getDate());\r\n  const defaultCurrDate = curr.toISOString().substring(0,10);\r\n\r\n  const [data, setData] = useState();\r\n  const [dateFrom, setDateFrom] = useState(defaultDate);\r\n  const [dateTo, setDateTo] = useState(defaultCurrDate);\r\n  const [stocks, setStocks] = useState(\"USD\");\r\n\r\n  useEffect(() => {\r\n    try {\r\n      async function getData() {\r\n        const response = await axios.get(\r\n          `https://api.polygon.io/v2/aggs/ticker/${stocks}/range/1/day/${dateFrom}/${dateTo}?adjusted=true&sort=asc&limit=250&apiKey=XEJdGtYCig2lpb3tPcpawDFdLf0aSWr5`\r\n        );\r\n\r\n        setData(response.data);\r\n        return response;\r\n      }\r\n\r\n      getData();\r\n    } catch {\r\n      console.error(\"error\");\r\n    }\r\n  }, [stocks, dateFrom, dateTo]);\r\n\r\n  console.log(data);\r\n  return (\r\n    <>\r\n      <div className=\"chart\">\r\n      <p className=\"title\">Stock Prices </p>\r\n        <div className=\"date-picker\">\r\n          <label htmlFor=\"dateFrom\">from</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"dateFrom\"\r\n            defaultValue={defaultDate}\r\n            max={defaultCurrDate}\r\n            onChange={(e) => setDateFrom(e.target.value)}\r\n          ></input>\r\n          <label htmlFor=\"dateTo\">to</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"dateTo\"\r\n            defaultValue={defaultCurrDate}\r\n            max={defaultCurrDate}\r\n            onChange={(e) => setDateTo(e.target.value)}\r\n          ></input>\r\n\r\n          <label htmlFor=\"select\">Stock</label>\r\n          <select\r\n            name=\"select\"\r\n            id=\"submit\"\r\n            onChange={(e) => setStocks(e.target.value)}\r\n          >\r\n            {dataType.map((stock) => (\r\n              <option value={stock}>{stock}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n    <div className=\"two\">\r\n          {data ? (\r\n            <MyChart priceData={data} />\r\n          ) : null}\r\n    </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { MainPage } from \"./Components/MainPage/MainPage\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <MainPage />\n    \n  </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}